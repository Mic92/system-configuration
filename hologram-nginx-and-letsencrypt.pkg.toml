[package]
name        = "hologram-nginx-and-letsencrypt"
version     = "1.2.0"
description = "Modular baseline configuration for nginx with sane defaults"
requires    = [
    "nginx",
    "letsencrypt",
]

definitionFile = "/usr/share/holo/users-groups/10-letsencrypt.toml"

################################################################################
# nginx baseline configuration

[[symlink]]
path   = "/etc/systemd/system/multi-user.target.wants/nginx.service"
target = "/usr/lib/systemd/system/nginx.service"

[[file]]
path    = "/etc/nginx/server-baseline-https.inc"
content = """
    # This file sets sane defaults for all the TLS shebang, so just include it
    # for every "server" directive that is TLS-enabled. Use like this:
    #
    #     server_name             $host;
    #     include                 /etc/nginx/server-baseline-tls.inc;
    #
    #     ssl_certificate         /etc/letsencrypt/live/$host/fullchain.pem;
    #     ssl_certificate_key     /etc/letsencrypt/live/$host/privkey.pem;
    #     ssl_trusted_certificate /etc/letsencrypt/live/$host/chain.pem;
    #
    # It's also recommended to set a Content-Security-Policy that's appropriate
    # for the service in question. For example:
    #
    #     add_header Content-Security-Policy "default-src 'self'" always;
    #

    # IPv4
    listen 443 ssl;
    # IPv6
    listen [::]:443 ssl;

    ssl on;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # source esp. for cipher suite selection: https://wiki.mozilla.org/Security/Server_Side_TLS
    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK';

    # recommended HTTP headers according to https://securityheaders.io
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains" always; # six months
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;

    # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # NOTE: generate this with `sudo openssl dhparam -out /etc/nginx/dhparam.pem 2048`
    ssl_dhparam /etc/nginx/dhparam.pem;

    # activate OCSP stapling (source: https://github.com/letsencrypt/letsencrypt/blob/master/letsencrypt-nginx/letsencrypt_nginx/configurator.py)
    ssl_stapling on;
    ssl_stapling_verify on;

    error_page 500 502 503 504  /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
"""

# make the default /etc/nginx/nginx.conf more modular by linking to /etc/nginx/sites-enabled
[[file]]
path    = "/usr/share/holo/files/00-base/etc/nginx/nginx.conf"
content = """
    user http;
    worker_processes 1;
    events {
        worker_connections 1024;
    }

    http {
        include mime.types;
        default_type application/octet-stream;

        sendfile on;
        keepalive_timeout 65;
        access_log off;

        server {
            # IPv4
            listen 80 default_server;
            # IPv6
            listen [::]:80 default_server;

            # forward all HTTP requests to HTTPS...
            location / {
                return 301 https://$host$request_uri;
            }
            # ...except for ACME challenges
            location /.well-known/acme-challenge/ {
                root /srv/letsencrypt;
            }
        }

        include /etc/nginx/sites-enabled/*.conf;
    }
"""

[[directory]]
path = "/etc/nginx/sites-enabled"

################################################################################
# run letsencrypt under restricted user

[[group]]
name   = "letsencrypt"
system = true

[[user]]
name   = "letsencrypt"
group  = "letsencrypt"
system = true
home   = "/var/lib/letsencrypt"

# webserver needs to be able to read the keys/certs generated by letsencrypt
[[user]]
name   = "http"
groups = ["letsencrypt"]

# fix UID/GID on directories provided by letsencrypt package
[[directory]]
path  = "/etc/letsencrypt"
owner = "letsencrypt"
group = "letsencrypt"
[[directory]]
path  = "/var/lib/letsencrypt"
owner = "letsencrypt"
group = "letsencrypt"
[[directory]]
path  = "/var/log/letsencrypt"
mode  = "0700"
owner = "letsencrypt"
group = "letsencrypt"

# filesystem location for the webroot challenge method
[[directory]]
path = "/srv/letsencrypt/.well-known"
mode  = "0750"
owner = "letsencrypt"
group = "letsencrypt"
[[directory]]
path = "/srv/letsencrypt/.well-known/acme-challenge"
mode  = "0750"
owner = "letsencrypt"
group = "letsencrypt"

# script to interactively (and after that, automatically) issue certificates
# TODO: During initial setup, there is an ugly manual step involved here.
# letsencrypt needs nginx to be running to serve the acme-challenge, but nginx
# won't start until certs have been provisioned. A workaround is to disable the
# https configurations until the first letsencrypt-allofthem passed.
[[file]]
path    = "/usr/bin/letsencrypt-allofthem"
mode    = "0755"
content = '''
    #!/bin/sh
    if [ "$USER" != "letsencrypt" ]; then
        echo "!! Run this as user letsencrypt." >&2
        exit 1
    fi

    set -e
    cat /etc/nginx/sites-enabled/*.conf | grep -o '/etc/letsencrypt/live/[^/]\+' | cut -d/ -f5 | sort -u | while read domain; do
        echo ">> domain: $domain"
        letsencrypt certonly --non-interactive --agree-tos --keep-until-expiring --webroot -w /srv/letsencrypt/ -d "$domain"
    done
'''

[[file]]
path    = "/usr/lib/systemd/system/letsencrypt-allofthem.service"
content = """
    [Unit]
    Description=Provision and renew TLS certificates automatically
    After=network-online.target
    Wants=network-online.target

    [Service]
    Type=oneshot
    ExecStart=/usr/bin/letsencrypt-allofthem
    ExecStartPost=/usr/bin/systemctl reload nginx.service
    User=letsencrypt
    Group=letsencrypt
    PermissionsStartOnly=true
"""

[[file]]
path    = "/usr/lib/systemd/system/letsencrypt-allofthem.timer"
content = """
    [Unit]
    Description=Provision and renew TLS certificates once a week
    After=network-online.target
    Wants=network-online.target

    [Timer]
    OnCalendar=weekly

    [Install]
    WantedBy=timers.target
"""

[[symlink]]
path   = "/etc/systemd/system/timers.target.wants/letsencrypt-allofthem.timer"
target = "/usr/lib/systemd/system/letsencrypt-allofthem.timer"
